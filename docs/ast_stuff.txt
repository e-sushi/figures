~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
in-the middle term deletion (linear binary ops)
---------------------------------------------------------------------

left op is lesser, no right op
      V          V          V
1 + 2 * 3    1 + 2   3    1 + 3    
    2___3    1___2        1___3
1_____*        +_____3      +
  +              E          E
    E   
1->2) left child changes parent to left operator (insert_first, right arg)
1->2) right child changes parent to expression (insert_last, remove arg)
2->3) right dangling term changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
left op is greater, no right op
      V          V          V
1 * 2 + 3    1 * 2   3    1 * 3    
1___2        1___2        1___3
  *_____3      *_____3      *
      +          E          E
    E
1->2) left child doesnt change
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op
2->3) right dangling term changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
left op is equal, no right op
      V          V          V
1 + 2 + 3    1 + 2   3    1 + 3    
1___2        1___2        1___3
  +_____3      +_____3      +
      +          E          E
    E
1->2) left child doesnt change
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op
2->3) right dangling term changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
no left op, right op is lesser
  V          V           V 
1 * 2 + 3    1   2 + 3    2 + 3
1___2            2___3    2___3
  *_____3    1_____+        + 
      +          E          E
    E
1->2) left child changes parent to expression (insert_last, remove arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) delete op
2->3) delete lit

---------------------------------------------------------------------
no left op, right op is greater
  V          V           V
1 + 2 * 3    1   2 * 3    2 * 3
    2___3        2___3    2___3
1_____*      1_____*        *
  +              E          E
    E
1->2) left child changes parent to expression (insert_last, remove arg)
1->2) right child doesnt change
1->2) delete op
2->3) delete lit

---------------------------------------------------------------------
nested left op is lesser, no right op
          V              V
1 + 2 + 3 * 4    1 + 2 + 3   4
1___2   3___4    1___2
  +_______*        +_____3
      +                +_____4
      E                E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op

---------------------------------------------------------------------
nested left op is greater, no right op
          V              V
1 + 2 * 3 + 4    1 + 2 * 3   4
    2___3            2___3
1_____*          1_____*
  +_________4      +_________4
          +            E
      E
1->2) left child does not change
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op

---------------------------------------------------------------------
nested left op is lesser, nested right op is lesser
      V              V              V
1 + 2 * 3 + 4    1 + 2   3 + 4    1 + 3 + 4
    2___3        1___2   3___4    1___3
1_____*            +_______+        +_____4
  +_________4          E                +
          +                           E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
nested left op is lesser, nested right op is equal
      V              V              V
1 + 2 * 3 * 4    1 + 2   3 * 4    1 + 3 * 4
    2___3        1___2   3___4        3___4
      *_____4      +_______*      1_____*
1_________*            E            +
  +                                   E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal's parentmost changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
nested left op is greater, nested right op is greater
      V              V              V
1 * 2 + 3 * 4    1 * 2   3 * 4    1 * 3 * 4
1___2   3___4    1___2   3___4    1___3
  *_______*        *_______*        *_____4
      +                E                *
      E                               E
1->2) left child doesnt change
1->2) right child doesnt change
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
nested nested left op is lesser, nested nested right op is lesser
          V                      V                      V
1 + 2 + 3 * 4 + 5 + 6    1 + 2 + 3   4 + 5 + 6    1 + 2 + 4 + 5 + 6
1___2   3___4            1___2       4___5        1___2
  +_______*                +_____3     +_____6      +_____4
      +_________5              +___________+            +_____5
             +______6              E                        +_____6
                  +                                       E
          E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
nested left op is lesser, nested nested right op is equal then greater
      V                  V                  V
1 + 2 * 3 * 4 ^ 5    1 + 2   3 * 4 ^ 5    1 + 3 * 4 ^ 5
    2___3   4___5                4___5            4___5
      *_______^      1___2   3_____^          3_____^
1_________*            +_______*          1_____*
  +                          E              +
       E                                        E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal's parentmost changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
nested left op is equal then greater, nested nested right op is lesser
          V                  V                  V
1 ^ 2 * 3 * 4 + 5    1 ^ 2 * 3   4 + 5    1 ^ 2 * 4 + 5
1___2                1___2                1___2
  ^_____3              ^_____3   4___5      ^_____4
      *_____4              *_______+            *_____5
          *_____5            E                      +
              +                                 E
        E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


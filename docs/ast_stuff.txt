~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
in-the middle term deletion (linear binary ops)

---------------------------------------------------------------------
left op is lesser, no right op
      V          V          V
1 + 2 * 3    1 + 2   3    1 + 3    
    2___3    1___2        1___3
1_____*        +_____3      +
  +              E          E
    E   
1->2) left child changes parent to left operator (insert_first, right arg)
1->2) right child changes parent to expression (insert_last, remove arg)
2->3) right dangling term changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
left op is greater, no right op
      V          V          V
1 * 2 + 3    1 * 2   3    1 * 3    
1___2        1___2        1___3
  *_____3      *_____3      *
      +          E          E
    E
1->2) left child doesnt change
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op
2->3) right dangling term changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
left op is equal, no right op
      V          V          V
1 + 2 + 3    1 + 2   3    1 + 3    
1___2        1___2        1___3
  +_____3      +_____3      +
      +          E          E
    E
1->2) left child doesnt change
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op
2->3) right dangling term changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
no left op, right op is lesser
  V          V           V 
1 * 2 + 3    1   2 + 3    2 + 3
1___2            2___3    2___3
  *_____3    1_____+        + 
      +          E          E
    E
1->2) left child changes parent to expression (insert_last, remove arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) delete op
2->3) delete lit

---------------------------------------------------------------------
no left op, right op is greater
  V          V           V
1 + 2 * 3    1   2 * 3    2 * 3
    2___3        2___3    2___3
1_____*      1_____*        *
  +              E          E
    E
1->2) left child changes parent to expression (insert_last, remove arg)
1->2) right child doesnt change
1->2) delete op
2->3) delete lit

---------------------------------------------------------------------
nested left op is lesser, no right op
          V              V
1 + 2 + 3 * 4    1 + 2 + 3   4
1___2   3___4    1___2
  +_______*        +_____3
      +                +_____4
      E                E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op

---------------------------------------------------------------------
nested left op is greater, no right op
          V              V
1 + 2 * 3 + 4    1 + 2 * 3   4
    2___3            2___3
1_____*          1_____*
  +_________4      +_________4
          +            E
      E
1->2) left child does not change
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op

---------------------------------------------------------------------
left op is equal, right op is equal
      V              V              V
1 + 2 + 3 + 4    1 + 2   3 + 4    1 + 3 + 4
1___2            1___2   3___4    1___3
  +_____3          +_______+        +_____4
      +_____4          E                +
          +                           E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
left op is equal, right op is equal, right lit deletion
      V                  V            V
1 + 2 + 3 + 4    1 + 2   3 + 4    1 + 2 + 4
1___2            1___2   3___4    1___2
  +_____3          +_______+        +_____4
      +_____4          E                +
          +                           E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to expression (insert_last, remove arg)
1->2) delete op
2->3) left lit parent changes parent to lit parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
left op is lesser, right op is lesser
      V              V              V
1 + 2 * 3 + 4    1 + 2   3 + 4    1 + 3 + 4
    2___3        1___2   3___4    1___3
1_____*            +_______+        +_____4
  +_________4          E                +
          +                           E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
left op is lesser, right op is equal
      V              V              V
1 + 2 * 3 * 4    1 + 2   3 * 4    1 + 3 * 4
    2___3        1___2   3___4        3___4
      *_____4      +_______*      1_____*
1_________*            E            +
  +                                   E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal's parentmost changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
left op is lesser, right op is equal, right lit deletion
      V                  V            V
1 + 2 * 3 * 4    1 + 2   3 * 4    1 + 2 * 4
    2___3        1___2   3___4        2___4
      *_____4      +_______*      1_____*
1_________*            E            +
  +                                   E
      E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) left lit changes parent to right op (insert_first, left arg)
2->3) right op changes parent to left op (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
left op is greater, right op is greater
      V              V              V
1 * 2 + 3 * 4    1 * 2   3 * 4    1 * 3 * 4
1___2   3___4    1___2   3___4    1___3
  *_______*        *_______*        *_____4
      +                E                *
      E                               E
1->2) left child doesnt change
1->2) right child doesnt change
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
nested left op is lesser, nested right op is lesser
          V                      V                      V
1 + 2 + 3 * 4 + 5 + 6    1 + 2 + 3   4 + 5 + 6    1 + 2 + 4 + 5 + 6
1___2   3___4            1___2       4___5        1___2
  +_______*                +_____3     +_____6      +_____4
      +_________5              +___________+            +_____5
             +______6              E                        +_____6
                  +                                       E
          E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
left op is lesser, nested right op is equal then greater
      V                  V                  V
1 + 2 * 3 * 4 ^ 5    1 + 2   3 * 4 ^ 5    1 + 3 * 4 ^ 5
    2___3   4___5                4___5            4___5
      *_______^      1___2   3_____^          3_____^
1_________*            +_______*          1_____*
  +                          E              +
       E                                        E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal's parentmost changes parent to lit parent (insert_last, right arg)
2->3) delete lit

---------------------------------------------------------------------
nested left op is equal then greater, right op is lesser
          V                  V                  V
1 ^ 2 * 3 * 4 + 5    1 ^ 2 * 3   4 + 5    1 ^ 2 * 4 + 5
1___2                1___2                1___2
  ^_____3              ^_____3   4___5      ^_____4
      *_____4              *_______+            *_____5
          *_____5            E                      +
              +                                 E
        E
1->2) left child changes parent to left operator (insert_last, right arg)
1->2) right child changes parent to right operator (insert_first, left arg)
1->2) left side's parentmost changes parent to expression (insert_last, no arg)
1->2) right side's parentmost changes parent to expression (insert_last, no arg)
1->2) delete op
2->3) right literal changes parent to lit parent (insert_last, right arg)
2->3) lit parent changes parent to right literal's old parent (insert_first, left arg)
2->3) delete lit

---------------------------------------------------------------------
literal deletion, left op is equal, right op is equal
    V          V          V
1 + 2 + 3    1 +   + 3    1 + 3    
1___2        1___         1___3
  +_____3      +_____3      +
      +          E          E
    E
1->2) delete lit
2->3) left lit changes parent to right op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, left op is equal, right op is equal
    V              V        V
1 + 2 + 3    1 +   + 3    1 + 3    
1___2        1___         1___3
  +_____3      +_____3      +
      +          E          E
    E
1->2) delete lit
2->3) right lit changes parent to left op (insert_last, right arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, left op is lesser, right op is greater
    V          V          V
1 + 2 * 3    1 +   * 3    1 * 3    
    2___3         ___3    1___3
1_____*      1_____*        *
  +            +            E
    E            E
1->2) delete lit
2->3) left lit changes parent to right op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, left op is lesser, right op is greater
    V              V        V
1 + 2 * 3    1 +   * 3    1 + 3    
    2___3         ___3    1___3
1_____*      1_____*        +
  +            +            E
    E            E
1->2) delete lit
2->3) right lit changes parent to left op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, nested left op greater, right op lesser
        V              V              V
1 + 2 * 3 + 4    1 + 2 *   + 4    1 + 2 + 4
    2___3            2___         1___2
1_____*          1_____*            +_____4
  +_________4      +_________4          +
          +            E              E
      E
1->2) delete lit
2->3) left lit changes parent to left op (insert_last, right arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, nested left op greater, right op lesser
        V                  V          V
1 + 2 * 3 + 4    1 + 2 *   + 4    1 + 2 * 4
    2___3            2___             2___4
1_____*          1_____*          1_____*
  +_________4      +_________4      +
          +            E              E
      E
1->2) delete lit
2->3) right lit changes parent to left op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, nested left op less, right op greater
        V              V              V
1 + 2 + 3 * 4    1 + 2 +   * 4    1 + 2 * 4
1___2   3___4    1___2    ___4        2___4
  +_______*        +_______*      1_____*
      +                +            +
      E                E              E
1->2) delete lit
2->3) left lit changes parent to right op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, nested left op less, right op greater
        V                  V            V
1 + 2 + 3 * 4    1 + 2 +   * 4    1 + 2 + 4
1___2   3___4    1___2    ___4    1___2
  +_______*        +_______*        +_____4
      +                +                +
      E                E              E
1->2) delete lit
2->3) right lit changes parent to left op (insert_last, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, nested left op less, nested right op greater
        V                  V                  V
1 + 2 + 3 * 4 * 5    1 + 2 +   * 4 * 5    1 + 2 * 4 * 5
        3___4                 ___4            2___4
1___2     *_____5    1___2     *_____5          *_____5
  +___________*        +___________*      1_________*
      +                    +                +
       E                    E                   E
1->2) delete lit
2->3) left lit changes parent to right op (insert_first, left arg)
2->3) right op's parentmost changes parent to left op (insert_last, right arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, nested left op greater, nested right op less
        V                      V                V
1 * 2 * 3 + 4 + 5    1 * 2 *   + 4 + 5    1 * 2 * 4 + 5
1___2                1___2                1___2
  *_____3   4___5      *_____    4___5      *_____4
      *_______+            *_______+            *_____5
          +                    +                    +
        E                    E                  E
1->2) delete lit
2->3) right lit changes parent to left op (insert_last, right arg)
2->3) left op's parentmost changes parent to right op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, nested left op greater, nested right op less
        V                      V                V
1 + 2 * 3 + 4 + 5    1 + 2 *   + 4 + 5    1 + 2 * 4 + 5
    2___3                2___                 2___4
1_____*              1_____*              1_____*
  +_________4          +_________4          +_________5
          +_____5              +_____5              +
              +                    +            E
        E                    E            
1->2) delete lit
2->3) right lit changes parent to left op (insert_last, right arg)
2->3) left op's parentmost changes parent to right op (insert_first, left arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, nested left op equal, right op equal
        V              V              V
1 + 2 * 3 * 4    1 + 2 *   * 4    1 + 2 * 4
    2___3            2___             2___4
      *_____4          *_____4    1_____*
1_________*      1_________*        +
  +                +                  E
      E                E          
1->2) delete lit
2->3) left lit changes parent to right op (insert_first, left arg)
2->3) right op's parentmost changes parent to left op (insert_last, right arg)
2->3) delete op

---------------------------------------------------------------------
literal deletion, right op deletion, nested left op equal, right op equal
        V                      V                V
1 + 2 * 3 * 4 + 5    1 + 2 *   * 4 + 5    1 + 2 * 4 + 5
    2___3                2___                 2___4
      *_____4              *_____4        1_____*
1_________*          1_________*            +_________5
  +_____________5      +_____________5              +
              +                    +            E
        E                    E            
1->2) delete lit
2->3) right lit changes parent to left op (insert_last, right arg)
2->3) delete op
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
in-the middle term insertion (linear binary ops)

---------------------------------------------------------------------
op insertion, left literal, right op equal
V          V
1 + 3    1 +   + 3
1___3    1___
  +        +_____3
  E            +
             E
1->2) left lit changes parent to op (insert_first)
1->2) op changes parent to right op (insert_first)

---------------------------------------------------------------------
op insertion, left literal, right op greater
V          V
1 * 3    1 +   * 3
1___3         ___3
  *      1_____*
  E        +
             E
1->2) left lit changes parent to op (insert_first)
1->2) right op changes parent to op (insert_last)

---------------------------------------------------------------------
op insertion, left literal, nested right op greater, right right op equal
V            V
1 * 3 + 4    1 +   * 3 + 4
1___3             ___3
  *_____4    1_____*
      +        +_________4
  E                    +
                   E
1->2) left lit changes parent to op (insert_first)
1->2) right op changes parent to op (insert_last)
1->2) op changes parent to right op old parent (insert_first)

---------------------------------------------------------------------
op insertion, left literal, left op less, nested right op equal, right right op less
    V                  V
1 + 2 * 4 + 5    1 + 2 *   * 4 + 5
    2___4            2___
1_____*                *_____4
  +_________5    1_________*
          +        +_____________5
      E                  E
1->2) left lit changes parent to op (insert_first)
1->2) op changes parent to right op (insert_last)

---------------------------------------------------------------------
op insertion, left literal, left op less, nested right op less, right right op less
    V                  V
1 + 2 + 4 + 5    1 + 2 *   + 4 + 5
1___2                2___
  +_____4        1_____*
      +_____5      +_________4
          +                +_____5
      E                        +
                         E
1->2) left lit changes parent to op (insert_first)
1->2) op changes parent to left op (insert_last)

---------------------------------------------------------------------
op insertion, left literal, left op equal, nested right op less, right right op less
    V                  V
1 * 2 + 4 + 5    1 * 2 *   + 4 + 5
1___2            1___2
  *_____4          *_____
      +_____5          *_____4
          +                +_____5
      E                        +
                         E
1->2) left op changes parent to op (insert_first)
1->2) op changes parent to right op (insert_first)

---------------------------------------------------------------------
op insertion, left literal, left op greater, nested right op greater, right right op equal
    V                  V
1 * 2 * 4 + 5    1 * 2 +   * 4 + 5
1___2            1___2    ___4
  *_____4          *_______*
      *_____5          +_____4
          +                +_____5
      E                        +
                         E
1->2) left op changes parent to op (insert_first)
1->2) right op changes parent to op (insert_last)
1->2) op changes parent to right op old parent (insert_first)

---------------------------------------------------------------------
op insertion, left literal, nested left op greater, nested right op greater, left left op equal, right right op equal
        V                      V
1 + 2 * 3 * 5 + 6    1 + 2 * 3 +   * 5 + 6
    2___3                2___3    ___5
      *_____5              *_______*
1_________*          1_________+
  +_____________6      +_________________6
              +                       +
        E                      E
1->2) left op changes parent to op (insert_first)
1->2) right op changes parent to op (insert_last)
1->2) op changes parent to right op old parent (insert_last)

---------------------------------------------------------------------
op insertion, left literal, nested left op greater, nested right op greater, left left op equal, right right op greater
        V                      V
1 + 2 * 3 * 5 * 6    1 + 2 * 3 +   * 5 * 6
    2___3                2___3    ___5    
      *_____5        1_____*       *_____6
          *_____6      +_______________*
1_____________*                +
  +
        E
1->2) left op changes parent to left left op (insert_last)
1->2) left left op changes parent to op (insert_first)
1->2) right right op changes parent to op (insert_last)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   |
1 +|3 * 4 + 5
   |3___4
1__|__*
  +|________5
   |      +
          ^

   | 3___4
1__|__*      ___5
  +|          +
  ^

   |   3___4
1__|     *___5
  +|     ^ +

   |   3___4
1__|   ^ *___5
  +|       +

---------------------------------------------------------------------

1 + 2 *|3 * 4 + 5
    2__|3
      *|____4
1______|__*
  +____|________5
       |      +
              ^

    2__|3
      *|____4
1______|__*     ___5
  +    |         +
  ^

       2__|3
         *|__4
1___      |*___5
  +       |^ +

  2__|3    ___4
1___*|      *___5
  + ^|        +

  2__|   3___4
1___*|   ^ *___5
  +  |       +

---------------------------------------------------------------------

2 * 2 +|3 * 3 + 4
2___2  |3___3
  *____|__*
      +|________4
       |      +
              ^

2___2  |3___3
  *____|__*     ___4
      +|         +
      ^

2___2  |3___3
  *____|__*     ___4
  ^   +|         +

2___2  |3___3
^ *____|__*     ___4
      +|         +

2___2  |3___3
  *_^__|__*     ___4
      +|         +

2___2  |   3___3
  *____|     *___4
      +|     ^ +

2___2  |   3___3
  *____|   ^ *___4
      +|       +

2___2|   3___3
  *__|     *^__4
    +|       +